import telebot
import config
import datetime
import random
import re
import math
import re
from telebot import types
class CorgiBot:
    def __init__(self, token):
        self.vector_1_coords = None  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏ –≤–µ–∫—Ç–æ—Ä–∞
        self.vector_2_coords = None  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏ –≤–µ–∫—Ç–æ—Ä–∞
        self.bot = telebot.TeleBot(token)
        self.start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        self.start_item = types.KeyboardButton("üìö –¢–µ–º–∏")  # –ö–Ω–æ–ø–∫–∞ "–¢–µ–º–∏"
        self.exit_item = types.KeyboardButton("üö™ –í–∏—Ö—ñ–¥")  # –ö–Ω–æ–ø–∫–∞ "–í–∏–π—Ç–∏"
        self.help_item = types.KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞")  # –ö–Ω–æ–ø–∫–∞ "–î–æ–ø–æ–º–æ–≥–∞"
        self.start_markup.add(self.start_item, self.help_item)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        self.start_markup.add(self.exit_item)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        self.topics = {
            "üìè –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ –≤–µ–∫—Ç–æ—Ä—ñ–≤", "–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞", "–ß–∏—Å–ª–æ œÄ"],
            "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è": ["5 –Ω–∞–π–≤–∏—â–∏—Ö –≥—ñ—Ä", "–ö—Ä–∞—ó–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ–∑–µ—Ä", "–ú—ñ—Å—Ç–æ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–∞—Å–µ–ª–µ–Ω–Ω—è", "–ó–Ω–∞–π—Ç–∏ –∞–∑–∏–º—É—Ç", "–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏"],
            "ü§Æ –§—ñ–∑–∏–∫–∞": ["–ó–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞", "–ó–∞–∫–æ–Ω –ö—É–ª–æ–Ω–∞", "–°—Ç–∞–ª–∞ –ü–ª–∞–Ω–∫–∞", "–ö—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å—Ç–∞–ª–∞"],
            "üí´ –§—ñ–ª–æ–ª–æ–≥—ñ—è": ["–Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å–∏–≤ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ?", "–Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ?"],
            "üìÉ –†–æ–±–æ—Ç–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º": ["–°–ª–æ–≤–∞ –∑ –ø–µ–≤–Ω–æ—é –ª—ñ—Ç–µ—Ä–æ—é", "–ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è", "–ê–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫",
                                   "–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–∞ –∑ —Ü–∏—Ñ—Ä–∞–º–∏", "–ù–∞–π–¥–æ–≤—à—ñ —Å–ª–æ–≤–∞ –±–µ–∑ –≥–æ–ª–æ—Å–Ω–∏—Ö"],
            "ü§ì –ó–∞–≥–∞–ª—å–Ω—ñ": ["–î–Ω—ñ–≤ —É —Ä–æ—Ü—ñ", "–ó–∞—Å–ø—ñ–≤–∞–π –∫–æ–ª—è–¥–∫—É", "–ì—Ä–∞ —ñ—Å—Ç–æ—Ä—ñ—è", "–ù–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∞ –º–æ–≤–∞", "–ù–∞–π–±—ñ–ª—å—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞",
                           "–ù–∞–π–≤–∏—â–∞ –±—É–¥—ñ–≤–ª—è", "–ù–∞–π–≤—ñ–¥–æ–º—ñ—à–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞ —É –∫—ñ–Ω–æ—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó", "–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∞ —Å—Ç–∞—Ç—É—è",
                           "–ù–∞–π—à–≤–∏–¥—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞", "–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∏–π –º—É–∑–∏—á–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å"]
        }  # –°–ª–æ–≤–Ω–∏–∫ –∑ —Ç–µ–º–∞–º–∏ —Ç–∞ –ø—ñ–¥—Ç–µ–º–∞–º–∏
        self.state = {}  # –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
        self.log_file = "dialog.txt"  # –Ü–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å—É –∂—É—Ä–Ω–∞–ª—É —Ä–æ–∑–º–æ–≤–∏
        self.log_filename = None
    def format_user_message(self, message):
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            message (str): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Returns:
            str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        return f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message}"
    def format_bot_message(self, message):
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞.

        Args:
            message (str): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞.

        Returns:
            str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é –±–æ—Ç–∞.
        """
        return f"<b>ü§ñ –ë–æ—Ç:</b> {message}"
    def log_message(self, chat_id, message_text):
        """
        –ó–∞–ø–∏—Å—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∂—É—Ä–Ω–∞–ª —Ä–æ–∑–º–æ–≤–∏.

        Args:
            chat_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É.
            message_text (str): –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

        """
        log_entry = f"{datetime.datetime.now()}: {message_text}\n"
        if self.log_filename:
            with open(self.log_filename, "a", encoding="utf-8") as f:
                f.write(log_entry)
        else:
            self.create_log_file(chat_id, log_entry)

    def remove_digit_words(self, text):
        """
        –í–∏–¥–∞–ª—è—î –∑ —Ç–µ–∫—Å—Ç—É –≤—Å—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏.

        Args:
            text (str): –í–∏—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç.

        Returns:
            str: –¢–µ–∫—Å—Ç –∑ –≤–∏–¥–∞–ª–µ–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏.
        """
        words = self.get_words(text)
        filtered_words = [word for word in words if not any(char.isdigit() for char in word)]
        return ' '.join(filtered_words)

    def get_sentences(self, text):
        sentences = []
        for line in text:
            line = line.strip()
            if line:
                line_sentences = line.split('.')  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É —Ç–æ—á–∫–∏
                sentences.extend(line_sentences)
        return sentences

    def process_text_file(self, input_file_path, output_file_path):
        """
        –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª.

        Args:
            input_file_path (str): –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É.
            output_file_path (str): –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        """
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—è
        with open(input_file_path, 'r', encoding='utf-8') as input_file:
            text = input_file.read()

        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É —Ç–∞ –∑–∞–ø–∏—Å —Ä–µ–∑-—ñ–≤ —É –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
        processed_text = self.process_text(text)

        with open(output_file_path, 'w', encoding='utf-8') as output_file:
            output_file.write(processed_text)
    def calculate_distance(self, point1, point2):
        """
        –û–±—á–∏—Å–ª—é—î –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏.

        Args:
            point1 (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏.
            point2 (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏.

        Returns:
            float: –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏.
        """
        if len(point1) != len(point2):
            raise ValueError("–î–æ–≤–∂–∏–Ω–∏ —Ç–æ—á–æ–∫ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏.")
        distance = sum((x - y) ** 2 for x, y in zip(point1, point2)) ** 0.5
        return distance
    def calculate_coulomb_law(self, charge1, charge2, distance):
        """
        –û–±—á–∏—Å–ª—é—î –µ–ª–µ–∫—Ç—Ä–∏—á–Ω—É —Å–∏–ª—É –∑–∞ –∑–∞–∫–æ–Ω–æ–º –ö—É–ª–æ–Ω–∞.

        Args:
            charge1 (float): –ó–∞—Ä—è–¥ –ø–µ—Ä—à–æ–≥–æ –æ–±'—î–∫—Ç—É.
            charge2 (float): –ó–∞—Ä—è–¥ –¥—Ä—É–≥–æ–≥–æ –æ–±'—î–∫—Ç—É.
            distance (float): –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏.

        Returns:
            float: –ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∞ —Å–∏–ª–∞.
        """
        k = 9e9  # –ï–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞—Ç–∏—á–Ω–∞ —Å—Ç–∞–ª–∞
        electric_force = k * abs(charge1) * abs(charge2) / (distance ** 2)
        return electric_force

    def get_words(self, text):
        words = text.split()
        return words
    def calculate_newton_law(self, mass1, mass2, distance):
        """
        –û–±—á–∏—Å–ª—é—î –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω—É —Å–∏–ª—É –∑–∞ –∑–∞–∫–æ–Ω–æ–º –ù—å—é—Ç–æ–Ω–∞.

        Args:
            mass1 (float): –ú–∞—Å–∞ –ø–µ—Ä—à–æ–≥–æ –æ–±'—î–∫—Ç—É.
            mass2 (float): –ú–∞—Å–∞ –¥—Ä—É–≥–æ–≥–æ –æ–±'—î–∫—Ç—É.
            distance (float): –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏.

        Returns:
            float: –ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å–∏–ª–∞.
        """
        G = 6.67430e-11  # –ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ –ø–æ—Å—Ç—ñ–π–Ω–∞
        gravitational_force = G * abs(mass1) * abs(mass2) / (distance ** 2)
        return gravitational_force

    def get_plank_constant(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–ª–æ—ó –ü–ª–∞–Ω–∫–∞.

        Returns:
            float: –ó–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–ª–æ—ó –ü–ª–∞–Ω–∫–∞.
        """
        plank_constant = 6.62607015e-34  # –ó–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–ª–æ—ó –ü–ª–∞–Ω–∫–∞
        return plank_constant
    def get_coulomb_constant(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–ª–æ–Ω—ñ–≤—Å—å–∫–æ—ó –ø–æ—Å—Ç—ñ–π–Ω–æ—ó.

        Returns:
            float: –ó–Ω–∞—á–µ–Ω–Ω—è –∫—É–ª–æ–Ω—ñ–≤—Å—å–∫–æ—ó –ø–æ—Å—Ç—ñ–π–Ω–æ—ó.
        """
        coulomb_constant = 8.9875517923e9  # –ó–Ω–∞—á–µ–Ω–Ω—è –∫—É–ª–æ–Ω—ñ–≤—Å—å–∫–æ—ó —Å—Ç–∞–ª–æ—ó
        return coulomb_constant
    def get_pi_constant(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–∞ –ø—ñ.

        Returns:
            float: –ó–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–∞ –ø—ñ.
        """
        pi_constant = 3.141592  # –ó–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–∞ –ø—ñ
        return pi_constant

    def create_log_file(self, chat_id, log_entry):
        """
        –°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª—É –∑ –¥—ñ–∞–ª–æ–≥–æ–º.

        Args:
            chat_id (int): ID —á–∞—Ç—É.
            log_entry (str): –ó–∞–ø–∏—Å –∂—É—Ä–Ω–∞–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.

        Returns:
            None
        """
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        self.log_filename = f"dialog_{timestamp}.txt"
        with open(self.log_filename, "w", encoding="utf-8") as f:
            f.write(f"Chat ID: {chat_id}\n")
            f.write(f"Start Time: {timestamp}\n")
            f.write(log_entry)

    def find_longest_words(self, text):
        sentences = self.get_sentences(text)
        words = self.get_words(text)
        longest_words = []
        max_length = 0
        vowels = ['–∞', '–µ', '–∏', '—ñ', '—ó', '–æ', '—É', '—é', '—è', '—î', '—ó']
        for word in words:
            has_vowels = False
            for vowel in vowels:
                if vowel in word:
                    has_vowels = True
                    break
            if not has_vowels:
                word_length = len(word)
                if word_length > max_length:
                    max_length = word_length
                    longest_words = [word]
                elif word_length == max_length:
                    longest_words.append(word)
        return longest_words

    def find_longest_words(self, text):
        words = self.get_words(text)
        longest_words = []
        max_length = 0

        for word in words:
            word = word.strip()
            if self.has_vowels(word):
                continue

            length = len(word)
            if length > max_length:
                max_length = length
                longest_words = [word]
            elif length == max_length:
                longest_words.append(word)

        return longest_words

    def has_vowels(self, word):
        vowels = ['–∞', '–µ', '–∏', '—ñ', '—ó', '–æ', '—É', '—é', '—è', '—î', '—ó']
        for vowel in vowels:
            if vowel in word:
                return True
        return False
    def contains_vowel(self, word):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ –≥–æ–ª–æ—Å–Ω—É –ª—ñ—Ç–µ—Ä—É.

        Args:
            word (str): –°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.

        Returns:
            bool: True, —è–∫—â–æ —Å–ª–æ–≤–æ –º—ñ—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–Ω—É –ª—ñ—Ç–µ—Ä—É, —ñ–Ω–∞–∫—à–µ False.
        """
        vowels = ['a', 'e', 'i', 'o', 'u']
        for vowel in vowels:
            if vowel in word.lower():
                return True
        return False

    def calculate_days_in_year(self, year):
        """
        –û–±—á–∏—Å–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —Ä–æ—Ü—ñ.

        Args:
            year (int): –†—ñ–∫ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.

        Returns:
            int: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —Ä–æ—Ü—ñ (365 –∞–±–æ 366).
        """
        if year % 400 == 0:
            return 366
        elif year % 100 == 0:
            return 365
        elif year % 4 == 0:
            return 366
        else:
            return 365
    def calculate_azimuth(self, point1_coords, point2_coords):
        """
        –û–±—á–∏—Å–ª—é—î –∞–∑–∏–º—É—Ç –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏.

        Args:
            point1_coords (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–æ—Ä—Ç–µ–∂—É (x1, y1).
            point2_coords (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–æ—Ä—Ç–µ–∂—É (x2, y2).

        Returns:
            float: –ó–Ω–∞—á–µ–Ω–Ω—è –∞–∑–∏–º—É—Ç—É –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö.
        """
        x1, y1 = point1_coords
        x2, y2 = point2_coords
        dx = x2 - x1
        dy = y2 - y1
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó atan2
        azimuth_rad = math.atan2(dy, dx)
        azimuth_deg = math.degrees(azimuth_rad)
        # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∞–∑–∏–º—É—Ç—É –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É 0-360 –≥—Ä–∞–¥—É—Å—ñ–≤
        if azimuth_deg < 0:
            azimuth_deg += 360
        return azimuth_deg

    def get_most_spoken_language(self):
        """
        –û—Ç—Ä–∏–º—É—î –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –º–æ–≤–∏ —Ç–∞ —ó—Ö –æ–ø–∏—Å–∏.

        Returns:
            str: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –º–æ–≤ —Ç–∞ —ó—Ö –æ–ø–∏—Å–∞–º–∏.
        """
        languages = {
            "¬∑ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞": " –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ - –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –º–æ–≤–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –±–∞–≥–∞—Ç—å–æ—Ö –∫—Ä–∞—ó–Ω–∞—Ö —Å–≤—ñ—Ç—É.",
            "¬∑ –ö–∏—Ç–∞–π—Å—å–∫–∞": " –ö–∏—Ç–∞–π—Å—å–∫–∞ –º–æ–≤–∞ - –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∞ –º–æ–≤–∞ —Å–µ—Ä–µ–¥ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –ö–∏—Ç–∞—é —Ç–∞ –∫–∏—Ç–∞–π—Å—å–∫–æ—ó –¥—ñ–∞—Å–ø–æ—Ä–∏.",
            "¬∑ –Ü—Å–ø–∞–Ω—Å—å–∫–∞": " –Ü—Å–ø–∞–Ω—Å—å–∫–∞ –º–æ–≤–∞ - –¥—Ä—É–≥–∞ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é –º–æ–≤–∞ —É —Å–≤—ñ—Ç—ñ –ø—ñ—Å–ª—è –∫–∏—Ç–∞–π—Å—å–∫–æ—ó.",
            "¬∑ –ê—Ä–∞–±—Å—å–∫–∞": " –ê—Ä–∞–±—Å—å–∫–∞ –º–æ–≤–∞ - –º–æ–≤–∞, —è–∫–æ—é –≥–æ–≤–æ—Ä—è—Ç—å —É –±—ñ–ª—å—à–æ—Å—Ç—ñ –∞—Ä–∞–±—Å—å–∫–∏—Ö –∫—Ä–∞—ó–Ω.",
            "¬∑ –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞": " –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞ –º–æ–≤–∞ - –æ–¥–Ω–∞ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –º–æ–≤ –û–û–ù —Ç–∞ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–ø—ñ–≤—Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–∞."
        }

        descriptions = []
        used_descriptions = set()  # –ú–Ω–æ–∂–∏–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤
        for language, description in languages.items():
            if description not in used_descriptions:
                descriptions.append(f"{language}: {description}")
                used_descriptions.add(description)

        formatted_text = "\n".join(descriptions)
        return formatted_text
    def get_largest_animal_description(self):
        return "–ù–∞–π–±—ñ–ª—å—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞ - —Å–∏–Ω—ñ–π –∫–∏—Ç. –í–∞–≥–∞ —Å–∏–Ω—å–æ–≥–æ –∫–∏—Ç–∞ –º–æ–∂–µ –¥–æ—Å—è–≥–∞—Ç–∏ –±–ª–∏–∑—å–∫–æ 200 —Ç–æ–Ω–Ω, –∞ –π–æ–≥–æ –¥–æ–≤–∂–∏–Ω–∞ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 30 –º–µ—Ç—Ä—ñ–≤."

    def get_tallest_building_description(self):
        return "–ù–∞–π–≤–∏—â–∞ –±—É–¥—ñ–≤–ª—è - –ë—É—Ä–¥–∂ –•–∞–ª—ñ—Ñ–∞. –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ –ë—É—Ä–¥–∂ –•–∞–ª—ñ—Ñ–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–∏–∑—å–∫–æ 828 –º–µ—Ç—Ä—ñ–≤, —â–æ —Ä–æ–±–∏—Ç—å –π–æ–≥–æ –Ω–∞–π–≤–∏—â–æ—é –±—É–¥—ñ–≤–ª–µ—é —É —Å–≤—ñ—Ç—ñ."

    def get_most_famous_movie_award_description(self):
        return "–ù–∞–π–≤—ñ–¥–æ–º—ñ—à–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞ —É –∫—ñ–Ω–æ—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó - –ø—Ä–µ–º—ñ—è –û—Å–∫–∞—Ä. –ü—Ä–µ–º—ñ—è –û—Å–∫–∞—Ä —î –æ–¥–Ω—ñ—î—é –∑ –Ω–∞–π–ø—Ä–µ—Å—Ç–∏–∂–Ω—ñ—à–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥ —É –∫—ñ–Ω–æ—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó —ñ –≤—Ä—É—á–∞—î—Ç—å—Å—è —â–æ—Ä—ñ—á–Ω–æ –≤ –ì–æ–ª–ª—ñ–≤—É–¥—ñ."

    def get_most_famous_statue_description(self):
        return "–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∞ —Å—Ç–∞—Ç—É—è - –°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥–∏. –†–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤—ñ –õ—ñ–±–µ—Ä—Ç—ñ –≤ –ù—å—é-–ô–æ—Ä–∫—Å—å–∫—ñ–π –≥–∞–≤–∞–Ω—ñ, –°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥–∏ —î –æ–¥–Ω–∏–º —ñ–∑ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –°–®–ê."

    def get_fastest_animal_description(self):
        return "–ù–∞–π—à–≤–∏–¥—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞ - –≥–µ–ø–∞—Ä–¥. –ì–µ–ø–∞—Ä–¥ –º–æ–∂–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 110 –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤ –Ω–∞ –≥–æ–¥–∏–Ω—É –ø—Ä–æ—Ç—è–≥–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É."

    def get_most_famous_music_festival_description(self):
        return "–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∏–π –º—É–∑–∏—á–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å - —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ì–ª–∞—Å—Ç–æ–Ω–±–µ—Ä—ñ. –§–µ—Å—Ç–∏–≤–∞–ª—å –ì–ª–∞—Å—Ç–æ–Ω–±–µ—Ä—ñ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –æ–¥–Ω–∏–º –∑ –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —ñ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–∏—Ö –º—É–∑–∏—á–Ω–∏—Ö —Ñ–µ—Å—Ç–∏–≤–∞–ª—ñ–≤ —É —Å–≤—ñ—Ç—ñ."

    def find_words_with_letter(self, letter):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –ø–µ–≤–Ω—É –ª—ñ—Ç–µ—Ä—É.

        Args:
            letter (str): –õ—ñ—Ç–µ—Ä–∞ –¥–ª—è –ø–æ—à—É–∫—É.

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –∑–∞–¥–∞–Ω—É –ª—ñ—Ç–µ—Ä—É.
        """
        words = []
        for word in self.word_list:
            if letter in word.lower():
                words.append(word)
        return words

    def find_longest_sentence(self, text):
        sentences = text.split('.')
        longest_sentence = ''
        max_length = 0

        for sentence in sentences:
            sentence = sentence.strip()
            length = len(sentence)
            if length > max_length:
                max_length = length
                longest_sentence = sentence
        return longest_sentence

    def sort_words_alphabetically(self, words):
        """
        –°–æ—Ä—Ç—É—î —Å–ª–æ–≤–∞ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.

        Args:
            words (list): –°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.

        Returns:
            list: –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤.
        """
        words.sort()  # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤
        return words
    def remove_words_with_digits(self, text1):
        """
        –í–∏–¥–∞–ª—è—î —Å–ª–æ–≤–∞, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏, –∑ —Ç–µ–∫—Å—Ç—É.

        Args:
            text1 (str): –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç.

        Returns:
            str: –¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–∞–ª–µ–Ω—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏.
        """
        words = text1.split()
        cleaned_words = []
        for word in words:
            if not re.search(r'\d', word):
                cleaned_words.append(word)
        cleaned_text = ' '.join(cleaned_words)
        return cleaned_text

    def calculate_rectangle_area(self, length, width):
        """
        –†–∞—Ö—É—é –ø–ª–æ—â—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.

        Args:
            length (float): –î–æ–≤–∂–∏–Ω–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.
            width (float): –®–∏—Ä–∏–Ω–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.

        Returns:
            float: –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.
        """
        return length * width

    def run(self):
        @self.bot.message_handler(commands=['start'])
        def welcome(message):
            self.bot.send_message(
                message.chat.id,
                "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤.".format(
                    message.from_user, self.bot.get_me()),
                parse_mode='html', reply_markup=self.start_markup
            )

        @self.bot.message_handler(content_types=['text'])
        def handle_message(message):
            if message.chat.type == 'private':
                self.log_message(message.chat.id, message.text)

                if message.from_user.id == self.bot.get_me().id:
                    formatted_message = self.format_bot_message("–Ø –Ω–µ –∑–Ω–∞—é —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ üò¢")
                    self.bot.send_message(message.chat.id, formatted_message, parse_mode='html')
                else:
                    formatted_message = self.format_user_message(message.text)
                    self.bot.send_message(message.chat.id, formatted_message, parse_mode='html')

                if message.text == 'üìö –¢–µ–º–∏':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for topic in self.topics:
                        markup.add(types.KeyboardButton(topic))

                    markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                    self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:', reply_markup=markup)
                    self.state[message.chat.id] = 'topics'

                elif message.text == 'üö™ –í–∏—Ö—ñ–¥':
                    self.bot.send_message(message.chat.id, '–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ—Å—ñ—é. –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π!',
                                          reply_markup=types.ReplyKeyboardRemove())
                    self.state[message.chat.id] = None

                elif message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                    if self.state[message.chat.id] == 'subtopics':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for topic in self.topics:
                            markup.add(types.KeyboardButton(topic))

                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'topics'
                    elif self.state[message.chat.id] == 'topics':
                        self.bot.send_message(message.chat.id, '–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥', reply_markup=self.start_markup)
                        self.state[message.chat.id] = None

                elif message.text in self.topics:
                    self.current_topic = message.text
                    subtopics = self.topics[self.current_topic]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for subtopic in subtopics:
                        markup.add(types.KeyboardButton(subtopic))
                    markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                    self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞' or message.text == '/help':
                    help_message =  "1. –ó–∞–∫–æ–Ω –≤—Å–µ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ç—è–∂—ñ–Ω–Ω—è –ù—å—é—Ç–æ–Ω–∞: F = G * (m1 * m2) / r^2, –¥–µ F - —Å–∏–ª–∞ –ø—Ä–∏—Ç—è–≥–∞–Ω–Ω—è –º—ñ–∂ –¥–≤–æ–º–∞ —Ç—ñ–ª–∞–º–∏, G - –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å—Ç–∞–ª–∞, m1 —Ç–∞ m2 - –º–∞—Å–∏ —Ç—ñ–ª, r - –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–∞–º–∏ —Ç—ñ–ª. (–û–±—á–∏—Å–ª–∏—Ç–∏ F. m1, m2, r ‚Äì –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)\n" \
                                   "6. –ó–∞–∫–æ–Ω –ö—É–ª–æ–Ω–∞: F = k * (q1 * q2) / r^2, –¥–µ F - —Å–∏–ª–∞ –µ–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞—Ç–∏—á–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –º—ñ–∂ –¥–≤–æ–º–∞ –∑–∞—Ä—è–¥–∂–µ–Ω–∏–º–∏ —á–∞—Å—Ç–∏–Ω–∫–∞–º–∏, k - –∫—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å—Ç–∞–ª–∞, q1 —Ç–∞ q2 - –∑–∞—Ä—è–¥–∏ —á–∞—Å—Ç–∏–Ω–æ–∫, r - –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–∞–º–∏ —á–∞—Å—Ç–∏–Ω–æ–∫. (–û–±—á–∏—Å–ª–∏—Ç–∏ F)\n" \
                                   "11. –í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞–ª—É –ü–ª–∞–Ω–∫–∞\n" \
                                   "12. –í–∏–≤–µ—Å—Ç–∏ –∫—É–ª–æ–Ω—ñ–≤—Å—å–∫—É —Å—Ç–∞–ª—É\n" \
                                   "17. –§–æ—Ä–º—É–ª–∞ —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –¥–æ–±—É—Ç–∫—É –≤–µ–∫—Ç–æ—Ä—ñ–≤: A ¬∑ B = |A| |B| cos(Œ∏), –¥–µ |A| —Ç–∞ |B| - –¥–æ–≤–∂–∏–Ω–∏ –≤–µ–∫—Ç–æ—Ä—ñ–≤, Œ∏ - –∫—É—Ç –º—ñ–∂ –Ω–∏–º–∏.\n" \
                                   "22. –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: S = a * b, –¥–µ a —Ç–∞ b - –¥–æ–≤–∂–∏–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.\n" \
                                   "27. –í–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ œÄ.\n" \
                                   "32. –ù–∞–∑–≤—ñ—Ç—å 5 –Ω–∞–π–≤–∏—â–∏—Ö –≥—ñ—Ä –≤ —Å–≤—ñ—Ç—ñ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å —ó—Ö–Ω—ñ –≤–∏—Å–æ—Ç–∏.\n" \
                                   "37. –Ø–∫–∞ –¥–µ—Ä–∂–∞–≤–∞ –º–∞—î –Ω–∞–π–±—ñ–ª—å—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–∑–µ—Ä –≤ —Å–≤—ñ—Ç—ñ?\n" \
                                   "38. –Ø–∫–µ –º—ñ—Å—Ç–æ –º–∞—î –Ω–∞–π–±—ñ–ª—å—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –≤ —Å–≤—ñ—Ç—ñ?\n" \
                                   "42. –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –ê (x1, y1) —Ç–∞ –í (x2, y2), —è–∫—â–æ –≤—ñ–¥–æ–º—ñ —ó—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.\n" \
                                   "43. –ó–Ω–∞–π—Ç–∏ –∞–∑–∏–º—É—Ç –≤—ñ–¥ —Ç–æ—á–∫–∏ –ê (x1, y1) –¥–æ —Ç–æ—á–∫–∏ –í (x2, y2), —è–∫—â–æ –≤—ñ–¥–æ–º—ñ —ó—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.\n" \
                                   "48. –Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ Passive Voice –≤ Present Simple?\n" \
                                   "53. –Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏ —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ?\n" \
                                   "58. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø–µ–≤–Ω—É –ª—ñ—Ç–µ—Ä—É (–ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –º–∞—î –∑–∞–ø–∏—Ç–∞—Ç–∏ –ª—ñ—Ç–µ—Ä—É).\n" \
                                   "63. –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –¥–æ–≤—à—ñ –∑–∞ 10 —Å–∏–º–≤–æ–ª—ñ–≤.\n" \
                                   "68. –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç—ñ.\n" \
                                   "69. –í–∏–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.\n" \
                                   "73. –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É –≤—Å—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏.\n" \
                                   "74. –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–æ–≤—à—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –Ω–µ –º—ñ—Å—Ç—è—Ç—å –≥–æ–ª–æ—Å–Ω–∏—Ö –ª—ñ—Ç–µ—Ä.\n" \
                                   "79. –°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —É ___ —Ä–æ—Ü—ñ?\n" \
                                   "84. –ó–∞—Å–ø—ñ–≤–∞—Ç–∏ –∫–æ–ª—è–¥–∫—É (5 —Ä—ñ–∑–Ω–∏—Ö, –≤–∏–≤–µ—Å—Ç–∏ –∫—É–ø–ª–µ—Ç).\n" \
                                   "89. –ì—Ä–∞ ¬´—ñ—Å—Ç–æ—Ä—ñ—è¬ª. –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–¥–∞—î 5 –ø–∏—Ç–∞–Ω—å: —Ö—Ç–æ, –¥–µ, –∫–æ–ª–∏, –Ω–∞–≤—ñ—â–æ, —â–æ. –Ü –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î —ó—Ö —É –∑–∞–≥–æ—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –≤–∏–≤–æ–¥–∏—Ç—å. (5 —Ä—ñ–∑–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤).\n" \
                                   "94. –Ø–∫–∞ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∞ –º–æ–≤–∞ —É —Å–≤—ñ—Ç—ñ?\n" \
                                   "99. –Ø–∫–∞ –Ω–∞–π–±—ñ–ª—å—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞?\n" \
                                   "100. –Ø–∫–∞ –Ω–∞–π–≤–∏—â–∞ –±—É–¥—ñ–≤–ª—è —É —Å–≤—ñ—Ç—ñ –Ω–∞—Ä–∞–∑—ñ?\n" \
                                   "104. –Ø–∫–∞ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞ —É –∫—ñ–Ω–æ—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó?\n" \
                                   "105. –Ø–∫–∞ –Ω–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∞ —Å—Ç–∞—Ç—É—è —É —Å–≤—ñ—Ç—ñ?\n" \
                                   "110. –Ø–∫–∞ –Ω–∞–π—à–≤–∏–¥—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞?\n" \
                                   "115. –Ø–∫–∏–π –Ω–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∏–π –º—É–∑–∏—á–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É —Å–≤—ñ—Ç—ñ?\n\n"\
                                   "–î–ª—è –≤–∏—Ö–æ–¥—É, –Ω–∞–ø–∏—à—ñ—Ç—å üö™ –í–∏—Ö—ñ–¥ "

                    self.bot.send_message(message.chat.id, help_message)
                    self.state[message.chat.id] = None

                elif message.text == '–í–∏–π—Ç–∏':
                    self.bot.send_message(message.chat.id, '–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –î—è–∫—É—é, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.',
                                          reply_markup=types.ReplyKeyboardRemove())
                    self.state[message.chat.id] = None


                elif message.text == '–°—Ç–∞–ª–∞ –ü–ª–∞–Ω–∫–∞' and self.state[message.chat.id] == 'subtopics':
                    plank_constant = self.get_plank_constant()
                    self.bot.send_message(message.chat.id, f'–°—Ç–∞–ª–∞ –ü–ª–∞–Ω–∫–∞: {plank_constant}')

                elif message.text == '–ö—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å—Ç–∞–ª–∞' and self.state[message.chat.id] == 'subtopics':
                    q_constant = self.get_coulomb_constant()
                    self.bot.send_message(message.chat.id, f'–ö—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å—Ç–∞–ª–∞: {q_constant}')

                elif message.text == '–ó–∞–∫–æ–Ω –ö—É–ª–æ–Ω–∞' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ä—è–¥—É q1:')
                    self.state[message.chat.id] = 'charge1'

                elif self.state[message.chat.id] == 'charge1':
                    try:
                        charge1 = float(message.text)
                        self.state['charge1'] = charge1
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ä—è–¥—É q2:')
                        self.state[message.chat.id] = 'charge2'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif self.state[message.chat.id] == 'charge2':
                    try:
                        charge2 = float(message.text)
                        self.state['charge2'] = charge2
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∑–∞—Ä—è–¥–∞–º–∏:')
                        self.state[message.chat.id] = 'distance1'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif self.state[message.chat.id] == 'distance1':
                    try:
                        distance1 = float(message.text)
                        charge1 = self.state['charge1']
                        charge2 = self.state['charge2']
                        electric_force = self.calculate_coulomb_law(charge1, charge2, distance1)
                        self.bot.send_message(message.chat.id, f'–ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∞ —Å–∏–ª–∞: {electric_force}')
                        self.state[message.chat.id] = 'subtopics'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif message.text == '–ó–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏ m1:')
                    self.state[message.chat.id] = 'mass1'

                elif self.state[message.chat.id] == 'mass1':
                    try:
                        mass1 = float(message.text)
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏ m2:')
                        self.state[message.chat.id] = 'mass2'
                        self.state['mass1'] = mass1
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif self.state[message.chat.id] == 'mass2':
                    try:
                        mass2 = float(message.text)
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ r:')
                        self.state[message.chat.id] = 'distance'
                        self.state['mass2'] = mass2
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif self.state[message.chat.id] == 'distance':
                    try:
                        distance = float(message.text)
                        mass1 = self.state['mass1']
                        mass2 = self.state['mass2']
                        gravitational_force = self.calculate_newton_law(mass1, mass2, distance)
                        self.bot.send_message(message.chat.id, f'–ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å–∏–ª–∞: {gravitational_force}')
                        self.state[message.chat.id] = 'subtopics'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif message.text == '–î–Ω—ñ–≤ —É —Ä–æ—Ü—ñ' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫:')
                    self.state[message.chat.id] = 'year'

                elif self.state[message.chat.id] == 'year':
                    try:
                        year = int(message.text)
                        days_in_year = self.calculate_days_in_year(year)
                        self.bot.send_message(message.chat.id, f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —Ä–æ—Ü—ñ: {days_in_year}')
                        self.state[
                            message.chat.id] = 'subtopics'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

                elif message.text == '–ó–∞—Å–ø—ñ–≤–∞–π –∫–æ–ª—è–¥–∫—É' and self.state[message.chat.id] == 'subtopics':
                    carols = [
                        ("–ö–æ–ª—è–¥–∞, –∫–æ–ª—è–¥–∞, –¥–∑–≤–µ–Ω—è—Ç—å –¥–∑–≤–æ–Ω–∏!", "–•—Ç–æ –≤ –≥–æ—Å—Ç—ñ –¥–æ –Ω–∞—Å –ø—Ä–∏–π—à–æ–≤, —â–µ–¥—Ä–∏–π –Ü—Å—É—Å –°–ª–∞–≤–∞ –ë–æ–≥—É!"),
                        ("–ó –ù–æ–≤–∏–º —Ä–æ–∫–æ–º –≤–∞—Å –≤—ñ—Ç–∞—î–º–æ, –•—Ä–∏—Å—Ç–æ—Å –Ω–∞—Ä–æ–¥–∏–≤—Å—è!",
                         "–ó –ù–æ–≤–∏–º —Ä–æ–∫–æ–º –º–∏ –≤–∞—Å –≤—ñ—Ç–∞—î–º–æ, –í–µ—Å–µ–ª–∏—Ö —Å–≤—è—Ç —â–∏—Ä–æ –±–∞–∂–∞—î–º–æ!"),
                        ("–í–µ—Å–µ–ª—ñ –∫–æ–ª—è–¥–∫–∏ —Å–ø—ñ–≤–∞–π–º–æ, –∑—ñ—Ä–∫–∏ —Å–≤—ñ—Ç–∞–Ω–∫—É —Ä–æ–∑–ø–∏—Å—É–π–º–æ!",
                         "–†–∞–¥—ñ—Å—Ç—å, —â–∞—Å—Ç—è –π –≤–µ—Å–µ–ª—ñ—Å—Ç—å –Ω–µ—Ö–∞–π –±—É–¥–µ –≤–∞–º –≤ –¥–æ–º—ñ!"),
                        ("–•—Ç–æ –º–∞—î –ø–æ–∫—Ä–∏—à–∫–∏ –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö, –≤—ñ–Ω –Ω–µ—Ö–∞–π —ó–∑–¥–∏—Ç—å –ø–æ –±–∞–≥–∞—Ç—Å—Ç–≤–∞—Ö!",
                         "–•—Ç–æ –º–∞—î —á–æ–±—ñ—Ç–∫–∏ –Ω–∞ –Ω—ñ–∂–∫–∞—Ö, –≤—ñ–Ω –Ω–µ—Ö–∞–π –≥—Ä–∞—î –ø–æ –∑–æ–ª–æ—Ç–∫–∞—Ö!"),
                        ("–î–∑–≤–µ–Ω—è—Ç—å –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏, —â–µ–¥—Ä—ñ–≤–æ—á–∫–∏ —Å–ø—ñ–≤–∞—é—Ç—å, –∑—ñ—Ä–∫–∏ —Å—è—é—Ç—å, –•—Ä–∏—Å—Ç–æ—Å –Ω–∞—Ä–æ–¥–∏–≤—Å—è!",
                         "–©–∞—Å—Ç—è, —Ä–∞–¥—ñ—Å—Ç—å —ñ –∑–¥–æ—Ä–æ–≤'—è —É –≤–∞—à–æ–º—É –¥–æ–º—ñ –Ω–µ—Ö–∞–π –∑—ñ–≥—Ä—ñ–≤–∞—é—Ç—å!")
                    ]
                    carol = random.choice(carols)
                    verse1, verse2 = carol
                    self.bot.send_message(message.chat.id, f"{verse1}\n{verse2}")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ì—Ä–∞ —ñ—Å—Ç–æ—Ä—ñ—è' and self.state[message.chat.id] == 'subtopics':
                    questions = ['–•—Ç–æ', '–î–µ', '–ö–æ–ª–∏', '–ù–∞–≤—ñ—â–æ', '–©–æ']
                    texts = [
                        '–ñ–∏–ª–∞-–±—É–ª–∞ {0} –≤ {1} {2} —Ä–æ—Ü—ñ. –í–æ–Ω–∞ –ø—Ä–∏–π—à–ª–∞ —Ç—É–¥–∏ {3} —ñ —Ä–æ–±–∏–ª–∞ {4}.',
                        '–ë—É–≤ –∫–æ–ª–∏—Å—å {0}, —è–∫–∏–π –∂–∏–≤ —É {1}. –£ {2} —Ä–æ—Ü—ñ –≤—ñ–Ω –∑—Ä–æ–±–∏–≤ —Ü–µ –¥–ª—è {3} —ñ –æ—Ç—Ä–∏–º–∞–≤ {4}.',
                        '–£ {2} —Ä–æ—Ü—ñ {0} –ø—Ä–∏–π—à–æ–≤ –¥–æ {1}. –¶–µ –±—É–ª–æ –¥–ª—è {3} —ñ {4} –±—É–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.',
                        '{0} –≤ {2} —Ä–æ—Ü—ñ –ø—Ä–∏–±—É–≤ –¥–æ {1}. –ô–æ–≥–æ –º–µ—Ç–∞ –±—É–ª–∞ {3}, —ñ –≤—ñ–Ω —Ä–æ–±–∏–≤ {4}.',
                        '–£ {2} —Ä–æ—Ü—ñ {0} –≤–∏—Ä—É—à–∏–≤ –¥–æ {1} –¥–ª—è {3}. –í—ñ–Ω –∑—Ä–æ–±–∏–≤ —Ü–µ, —Ä–µ–∞–ª—ñ–∑–æ–≤—É—é—á–∏ {4}.'
                    ]

                    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
                    answers = [
                        '–∫–æ—Ä–æ–ª–µ–≤–∞', '–∫—Ä–∞—ó–Ω–∞', '2023', '—Ä–æ–∑–≤–∞–≥–∏', '—Ä–µ—Ñ–æ—Ä–º–∏',
                        '–º–æ—Ä—è–∫', '–º—ñ—Å—Ç–æ', '1876', '–ø—Ä–∏–≥–æ–¥–∞', '–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è',
                        '–º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫', '—Å–µ–ª–æ', '1600', '–ø—Ä–∏–≥–æ–¥–∞', '–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è',
                        '–≤—á–µ–Ω–∏–π', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è', '1945', '–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è', '–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è',
                        '—Ä–æ–∑–≤—ñ–¥–Ω–∏–∫', '–ø—É—Å—Ç–µ–ª—è', '2020', '–±–µ–∑–ø–µ–∫–∞', '–º—ñ—Å—ñ—è'
                    ]

                    for text in texts:
                        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
                        random_answers = [answers.pop(random.randrange(len(answers))) for _ in range(5)]
                        story = text.format(*random_answers)
                        self.bot.send_message(message.chat.id, story)

                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∞ –º–æ–≤–∞' and self.state[message.chat.id] == 'subtopics':
                    most_spoken_language = self.get_most_spoken_language()
                    self.bot.send_message(message.chat.id, f'–ù–∞–π–ø–æ—à–∏—Ä—ñ–Ω—ñ—à–∞ –º–æ–≤–∞: {most_spoken_language}')
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–±—ñ–ª—å—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞' and self.state[message.chat.id] == 'subtopics':
                    animal_description = self.get_largest_animal_description()
                    self.bot.send_message(message.chat.id, animal_description)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–≤–∏—â–∞ –±—É–¥—ñ–≤–ª—è' and self.state[message.chat.id] == 'subtopics':
                    building_description = self.get_tallest_building_description()
                    self.bot.send_message(message.chat.id, building_description)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–≤—ñ–¥–æ–º—ñ—à–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞ —É –∫—ñ–Ω–æ—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó' and self.state[
                    message.chat.id] == 'subtopics':
                    award_description = self.get_most_famous_movie_award_description()
                    self.bot.send_message(message.chat.id, award_description)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∞ —Å—Ç–∞—Ç—É—è' and self.state[message.chat.id] == 'subtopics':
                    statue_description = self.get_most_famous_statue_description()
                    self.bot.send_message(message.chat.id, statue_description)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π—à–≤–∏–¥—à–∞ —Ç–≤–∞—Ä–∏–Ω–∞' and self.state[message.chat.id] == 'subtopics':
                    fastest_animal_description = self.get_fastest_animal_description()
                    self.bot.send_message(message.chat.id, fastest_animal_description)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ù–∞–π–±—ñ–ª—å—à –≤—ñ–¥–æ–º–∏–π –º—É–∑–∏—á–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å' and self.state[
                    message.chat.id] == 'subtopics':
                    music_festival_description = self.get_most_famous_music_festival_description()
                    self.bot.send_message(message.chat.id, music_festival_description)
                    self.state[message.chat.id] = 'subtopics'

                if message.text == '–°–ª–æ–≤–∞ –∑ –ø–µ–≤–Ω–æ—é –ª—ñ—Ç–µ—Ä–æ—é' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'input_file_name'
                elif self.state[message.chat.id] == 'input_file_name':
                    input_file_name = message.text
                    try:
                        with open(input_file_name, 'r', encoding='utf-8') as file:
                            words = file.read().split()
                        self.state['words'] = words
                        word_list = ", ".join(words)
                        self.bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –∑ —Ñ–∞–π–ª—É '{input_file_name}':\n{word_list}")
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É:')
                        self.state[message.chat.id] = 'letter_input'
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É '{input_file_name}'.")
                        self.state[message.chat.id] = 'subtopics'
                elif self.state[message.chat.id] == 'letter_input':
                    letter = message.text.lower()
                    words = self.state['words']
                    words_with_letter = [word for word in words if letter in word.lower()]
                    if words_with_letter:
                        word_list = ", ".join(words_with_letter)
                        self.bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª—ñ—Ç–µ—Ä—É '{letter}':\n{word_list}")
                    else:
                        self.bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª—ñ—Ç–µ—Ä—É '{letter}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'output_file_name'
                    self.state['letter'] = letter
                elif self.state[message.chat.id] == 'output_file_name':
                    output_file_name = message.text
                    letter = self.state['letter']
                    words_with_letter = [word for word in self.state['words'] if letter in word.lower()]
                    if words_with_letter:
                        word_list = "\n".join(words_with_letter)
                        try:
                            with open(output_file_name, 'w', encoding='utf-8') as file:
                                file.write(word_list)
                            self.bot.send_message(message.chat.id,
                                                  f"–°–ª–æ–≤–∞, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª—ñ—Ç–µ—Ä—É '{letter}', –∑–∞–ø–∏—Å–∞–Ω—ñ —É —Ñ–∞–π–ª '{output_file_name}'.")
                        except IOError:
                            self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª '{output_file_name}'.")
                    else:
                        self.bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª—ñ—Ç–µ—Ä—É '{letter}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
                    self.state[message.chat.id] = 'subtopics'

                if message.text == '–ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'input_file_name_longest_sentence'
                elif self.state[message.chat.id] == 'input_file_name_longest_sentence':
                    input_file_name = message.text
                    try:
                        with open(input_file_name, 'r', encoding='utf-8') as file:
                            text = file.read()
                        longest_sentence = self.find_longest_sentence(text)
                        self.bot.send_message(message.chat.id, f"–ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è: {longest_sentence}")
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                        self.state[message.chat.id] = 'output_file_name_longest_sentence'
                        self.state['longest_sentence'] = longest_sentence
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É '{input_file_name}'.")
                        self.state[message.chat.id] = 'subtopics'
                elif self.state[message.chat.id] == 'output_file_name_longest_sentence':
                    output_file_name = message.text
                    longest_sentence = self.state['longest_sentence']
                    try:
                        with open(output_file_name, 'w', encoding='utf-8') as file:
                            file.write(longest_sentence)
                        self.bot.send_message(message.chat.id,
                                              f"–ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–µ —É —Ñ–∞–π–ª '{output_file_name}'.")
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª '{output_file_name}'.")
                    self.state[message.chat.id] = 'subtopics'

                if message.text == '–ê–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'input_file_name_alphabetical'
                elif self.state[message.chat.id] == 'input_file_name_alphabetical':
                    input_file_name = message.text
                    try:
                        with open(input_file_name, 'r', encoding='utf-8') as file:
                            text = file.read()
                        words = self.get_words(text)
                        sorted_words = sorted(words, key=lambda x: x.lower())
                        word_list = "\n".join(sorted_words)
                        self.bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:\n{word_list}")
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                        self.state[message.chat.id] = 'output_file_name_alphabetical'
                        self.state['sorted_words'] = sorted_words
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É '{input_file_name}'.")
                        self.state[message.chat.id] = 'subtopics'
                elif self.state[message.chat.id] == 'output_file_name_alphabetical':
                    output_file_name = message.text
                    sorted_words = self.state['sorted_words']
                    try:
                        with open(output_file_name, 'w', encoding='utf-8') as file:
                            file.write('\n'.join(sorted_words))
                        self.bot.send_message(message.chat.id,
                                              f"–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª '{output_file_name}'.")
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª '{output_file_name}'.")
                    self.state[message.chat.id] = 'subtopics'

                if message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–∞ –∑ —Ü–∏—Ñ—Ä–∞–º–∏' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'input_file_name_remove_digits'
                elif self.state[message.chat.id] == 'input_file_name_remove_digits':
                    input_file_name = message.text
                    try:
                        with open(input_file_name, 'r', encoding='utf-8') as file:
                            text = file.read()
                        filtered_text = self.remove_digit_words(text)
                        self.bot.send_message(message.chat.id, f"–¢–µ–∫—Å—Ç –±–µ–∑ —Å–ª—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏:\n{filtered_text}")
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                        self.state[message.chat.id] = 'output_file_name_remove_digits'
                        self.state['filtered_text'] = filtered_text
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É '{input_file_name}'.")
                        self.state[message.chat.id] = 'subtopics'
                elif self.state[message.chat.id] == 'output_file_name_remove_digits':
                    output_file_name = message.text
                    filtered_text = self.state['filtered_text']
                    try:
                        with open(output_file_name, 'w', encoding='utf-8') as file:
                            file.write(filtered_text)
                        self.bot.send_message(message.chat.id,
                                              f"–¢–µ–∫—Å—Ç –±–µ–∑ —Å–ª—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏, –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª '{output_file_name}'.")
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª '{output_file_name}'.")
                    self.state[message.chat.id] = 'subtopics'

                if message.text == '–ù–∞–π–¥–æ–≤—à—ñ —Å–ª–æ–≤–∞ –±–µ–∑ –≥–æ–ª–æ—Å–Ω–∏—Ö' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                    self.state[message.chat.id] = 'input_file_name_longest_words'
                elif self.state[message.chat.id] == 'input_file_name_longest_words':
                    input_file_name = message.text
                    try:
                        with open(input_file_name, 'r', encoding='utf-8') as file:
                            text = file.read()
                        longest_words = self.find_longest_words(text)
                        longest_words_without_vowels = [word for word in longest_words if not self.has_vowels(word)]
                        if longest_words_without_vowels:
                            words_list = "\n".join(longest_words_without_vowels)
                            self.bot.send_message(message.chat.id, f"–ù–∞–π–¥–æ–≤—à—ñ —Å–ª–æ–≤–∞ –±–µ–∑ –≥–æ–ª–æ—Å–Ω–∏—Ö:\n{words_list}")

                            self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É:')
                            self.state[message.chat.id] = 'output_file_name_longest_words'
                            self.state['longest_words'] = longest_words_without_vowels
                        else:
                            self.bot.send_message(message.chat.id, "–ù–µ–º–∞—î –Ω–∞–π–¥–æ–≤—à–∏—Ö —Å–ª—ñ–≤ –±–µ–∑ –≥–æ–ª–æ—Å–Ω–∏—Ö.")
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É '{input_file_name}'.")
                        self.state[message.chat.id] = 'subtopics'
                elif self.state[message.chat.id] == 'output_file_name_longest_words':
                    output_file_name = message.text
                    longest_words_without_vowels = self.state['longest_words']
                    try:
                        with open(output_file_name, 'w', encoding='utf-8') as file:
                            file.write('\n'.join(longest_words_without_vowels))
                        self.bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª '{output_file_name}'.")
                    except IOError:
                        self.bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª '{output_file_name}'.")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ß–∏—Å–ª–æ œÄ' and self.state[message.chat.id] == 'subtopics':
                    pi_constant = self.get_pi_constant()
                    self.bot.send_message(message.chat.id, f'–ß–∏—Å–ª–æ œÄ: {pi_constant}')
                    self.state[message.chat.id] = 'subtopics'


                elif message.text == '–°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ –≤–µ–∫—Ç–æ—Ä—ñ–≤' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x1, y1, z1)')
                    self.state[message.chat.id] = 'vector_1_input'
                elif self.state[message.chat.id] == 'vector_1_input':
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    vector_1_coords = message.text.split()
                    if len(vector_1_coords) != 3:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        vector_1_coords = [float(coord) for coord in vector_1_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x2, y2, z2)')
                    self.state[message.chat.id] = 'vector_2_input'
                    self.state['vector_1_coords'] = vector_1_coords
                elif self.state[message.chat.id] == 'vector_2_input':
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    vector_2_coords = message.text.split()
                    if len(vector_2_coords) != 3:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        vector_2_coords = [float(coord) for coord in vector_2_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    if 'vector_1_coords' not in self.state:
                        self.bot.send_message(message.chat.id, '–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞.')
                        return
                    vector_1_coords = self.state['vector_1_coords']
                    scalar_product = sum(x * y for x, y in zip(vector_1_coords, vector_2_coords))
                    self.bot.send_message(message.chat.id, f"–°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ –≤–µ–∫—Ç–æ—Ä—ñ–≤: {scalar_product}")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x1, y1)')
                    self.state[message.chat.id] = 'point1_input'
                elif self.state[message.chat.id] == 'point1_input':
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    point1_coords = message.text.split()
                    if len(point1_coords) != 2:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        point1_coords = [float(coord) for coord in point1_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x2, y2)')
                    self.state[message.chat.id] = 'point2_input'
                    self.state['point1_coords'] = point1_coords
                elif self.state[message.chat.id] == 'point2_input':
                    point2_coords = message.text.split()
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    if len(point2_coords) != 2:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        point2_coords = [float(coord) for coord in point2_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    if 'point1_coords' not in self.state:
                        self.bot.send_message(message.chat.id, '–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏.')
                        return
                    point1_coords = self.state['point1_coords']
                    distance = self.calculate_distance(point1_coords, point2_coords)
                    self.bot.send_message(message.chat.id, f"–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏: {distance}")
                    self.state[message.chat.id] = 'subtopics'


                elif message.text == '–Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å–∏–≤ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ?' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, "–í –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è Passive Voice —É Present Simple —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ–ø–æ–º—ñ–∂–Ω–æ–≥–æ –¥—ñ—î—Å–ª–æ–≤–∞ \"to be\" —É —Ç–µ–ø–µ—Ä—ñ—à–Ω—å–æ–º—É —á–∞—Å—ñ (am/is/are) —Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥—ñ—î—Å–ª–æ–≤–∞, —è–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è —É —Ñ–æ—Ä–º—É –ø—Ä–∏—á–∞—Å—Ç—è –º–∏–Ω—É–ª–æ–≥–æ —á–∞—Å—É (Past Participle).\n–ó–∞–≥–∞–ª—å–Ω–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —É—Ç–≤–æ—Ä–µ–Ω–Ω—è Passive Voice —É Present Simple:\n\n[–î–æ–ø–æ–º—ñ–∂–Ω–µ –¥—ñ—î—Å–ª–æ–≤–æ \"to be\" —É Present Simple] + [–û—Å–Ω–æ–≤–Ω–µ –¥—ñ—î—Å–ª–æ–≤–æ —É —Ñ–æ—Ä–º—ñ Past Participle] + [–î–æ–¥–∞—Ç–æ–∫]")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–Ø–∫ —É—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ?' and self.state[message.chat.id] == 'subtopics':
                    response = '''–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –º–∞—î –∫—ñ–ª—å–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è —É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –º–Ω–æ–∂–∏–Ω–∏ —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤. –ó–∞–∑–≤–∏—á–∞–π –¥–ª—è —É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –º–Ω–æ–∂–∏–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞: \n¬∑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è "-–∏" –∞–±–æ "-—ó" –¥–æ –¥–µ—è–∫–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤: –∫—ñ—Ç - –∫–æ—Ç–∏, –¥—ñ–º - –¥–æ–º–∏, –º–∞—Ç–∏ - –º–∞—Ç–µ—Ä—ñ. \n¬∑ –ó–º—ñ–Ω–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –Ω–∞ "-–∞" —É –¥–µ—è–∫–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫–∞—Ö: —Å–∏–Ω - —Å–∏–Ω–∏, –±—Ä–∞—Ç - –±—Ä–∞—Ç–∏. \n¬∑ –ó–º—ñ–Ω–∞ –æ—Å–Ω–æ–≤–∏ –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∑–≤—É–∫—É: –¥–∏—Ç–∏–Ω–∞ - –¥—ñ—Ç–∏, –æ–∫–æ - –æ—á—ñ. \n¬∑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è "-–∏—â–∞" –∞–±–æ "-—ñ—â–∞" –¥–æ –¥–µ—è–∫–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤: —Å—Ç—ñ–ª–µ—Ü—å - —Å—Ç—ñ–ª—å—Ü—ñ, –¥–µ—Ä–µ–≤–æ - –¥–µ—Ä–µ–≤–∞. \n¬∑ –î–µ—è–∫—ñ —ñ–º–µ–Ω–Ω–∏–∫–∏ –º–∞—é—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏: –ª—é–¥–∏–Ω–∞ - –ª—é–¥–∏, –º–∏—à–∞ - –º–∏—à—ñ. –¶—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —É—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –º–Ω–æ–∂–∏–Ω–∏ –±—ñ–ª—å—à–æ—Å—Ç—ñ —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ. –ü—Ä–æ—Ç–µ, —Å–ª—ñ–¥ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ –¥–µ—è–∫—ñ —ñ–º–µ–Ω–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –≤–∏–Ω—è—Ç–∫–∏ —Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ü–∏—Ö –ø—Ä–∞–≤–∏–ª.'''
                    self.bot.send_message(message.chat.id, response)
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '5 –Ω–∞–π–≤–∏—â–∏—Ö –≥—ñ—Ä' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, "1. –î–∂–æ–º–æ–ª—É–Ω–≥–º–∞ (–≠–≤–µ—Ä–µ—Å—Ç) - 8848,86 –º–µ—Ç—Ä—ñ–≤ \n2. –ß–æ–≥–æ—Ä–∏ - 8611 –º–µ—Ç—Ä—ñ–≤ \n3. –ö–∞–Ω—á–µ–Ω–¥–∂–∞–Ω–≥–∞ - 8586 –º–µ—Ç—Ä—ñ–≤ \n4. –õ—Ö–æ—Ü–∑–µ - 8516 –º–µ—Ç—Ä—ñ–≤ \n5. –ú–∞–∫–∞–ª—É - 8485 –º–µ—Ç—Ä—ñ–≤")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ö—Ä–∞—ó–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ–∑–µ—Ä' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, "–ö—Ä–∞—ó–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ–∑–µ—Ä: –ö–∞–Ω–∞–¥–∞. 60% –≤—Å—ñ—Ö –æ–∑–µ—Ä —Å–≤—ñ—Ç—É –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –ö–∞–Ω–∞–¥–∏: –±—ñ–ª—å—à 3000000 –æ–∑–µ—Ä, —â–æ –∑–∞–π–º–∞—é—Ç—å 9% –∫–∞–Ω–∞–¥—Å—å–∫–∏—Ö –∑–µ–º–µ–ª—å.")
                    self.state[message.chat.id] = 'subtopics'

                elif message.text == '–ú—ñ—Å—Ç–æ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–∞—Å–µ–ª–µ–Ω–Ω—è' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, "–ú—ñ—Å—Ç–æ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –≤ —Å–≤—ñ—Ç—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å - —Ü–µ –¢–æ–∫—ñ–æ, –Ø–ø–æ–Ω—ñ—è. –ó–∞ –¥–∞–Ω–∏–º–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –¢–æ–∫—ñ–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–Ω–∞–¥ 37 –º—ñ–ª—å–π–æ–Ω—ñ–≤ –ª—é–¥–µ–π. –¶–µ —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–µ –º–µ–≥–∞–ø–æ–ª—ñ—Å, —è–∫–∏–π –≤—ñ–¥–æ–º–∏–π —Å–≤–æ—î—é –≤–µ–ª–∏—á–µ–∑–Ω–æ—é –ø–ª–æ—â–µ—é, –≥—É—Å—Ç–æ—Ç–æ—é –Ω–∞—Å–µ–ª–µ–Ω–Ω—è —Ç–∞ –∫—É–ª—å—Ç—É—Ä–Ω–∏–º –±–∞–≥–∞—Ç—Å—Ç–≤–æ–º.")
                    self.state[message.chat.id] = 'subtopics'



                elif message.text == '–ó–Ω–∞–π—Ç–∏ –∞–∑–∏–º—É—Ç' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x1, y1)')
                    self.state[message.chat.id] = 'point1_input1'
                elif self.state[message.chat.id] == 'point1_input1':
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    point1_coords = message.text.split()
                    if len(point1_coords) != 2:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        point1_coords = [float(coord) for coord in point1_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    self.bot.send_message(message.chat.id,
                                          '–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó —Ç–æ—á–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º: (x2, y2)')
                    self.state[message.chat.id] = 'point2_input1'
                    self.state['point1_coords1'] = point1_coords
                elif self.state[message.chat.id] == 'point2_input1':
                    if message.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for subtopic in self.topics[self.current_topic]:
                            markup.add(types.KeyboardButton(subtopic))
                        markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                        self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                        self.state[message.chat.id] = 'subtopics'
                        return
                    point2_coords = message.text.split()
                    if len(point2_coords) != 2:
                        self.bot.send_message(message.chat.id,
                                              '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.')
                        return
                    try:
                        point2_coords = [float(coord) for coord in point2_coords]
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.')
                        return
                    if 'point1_coords1' not in self.state:
                        self.bot.send_message(message.chat.id, '–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏.')
                        return
                    point1_coords = self.state['point1_coords1']
                    azimuth = self.calculate_azimuth(point1_coords, point2_coords)
                    self.bot.send_message(message.chat.id, f"–ê–∑–∏–º—É—Ç –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏: {azimuth}")
                    self.state[message.chat.id] = 'subtopics'
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for subtopic in self.topics[self.current_topic]:
                        markup.add(types.KeyboardButton(subtopic))
                    markup.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å"))
                    self.bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:', reply_markup=markup)
                    self.state[message.chat.id] = 'subtopics'



                elif message.text == '–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞' and self.state[message.chat.id] == 'subtopics':
                    self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞:')
                    self.state[message.chat.id] = 'rectangle_length'
                elif self.state[message.chat.id] == 'rectangle_length':
                    try:
                        rectangle_length = float(message.text)
                        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞:')
                        self.state[message.chat.id] = 'rectangle_width'
                        self.state['rectangle_length'] = rectangle_length
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                elif self.state[message.chat.id] == 'rectangle_width':
                    try:
                        rectangle_width = float(message.text)
                        rectangle_length = self.state['rectangle_length']
                        rectangle_area = self.calculate_rectangle_area(rectangle_length, rectangle_width)
                        self.bot.send_message(message.chat.id, f'–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: {rectangle_area}')
                        self.state[message.chat.id] = 'subtopics'
                    except ValueError:
                        self.bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        self.bot.polling(none_stop=True)

if __name__ == "__main__":
    bot = CorgiBot(config.TOKEN)
    bot.run()
